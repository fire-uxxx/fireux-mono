#!/usr/bin/env node/** * FireUX Interactive Tenant Creation Script */import fs from 'fs'import { execSync } from 'child_process'import readline from 'readline'// Parse command line argumentsconst [parentSystem] = process.argv.slice(2)if (!parentSystem) {  console.error('Usage: pnpm create:tenant <parent-system>')  console.error('Example: pnpm create:tenant misebox')  console.error('Available systems: misebox, cleanbox, fireux')  process.exit(1)}const rl = readline.createInterface({  input: process.stdin,  output: process.stdout})const prompt = (question) => new Promise((resolve) => rl.question(question, resolve))async function main() {  console.log(`🚀 Creating tenant for ${parentSystem} system...\n`)    try {    const config = await gatherConfig()    console.log('\n📋 Configuration:')    console.log(`   System: ${config.parentSystem}`)    console.log(`   Tenant: ${config.tenantName}`)    console.log(`   Port: ${config.port}`)    console.log(`   Primary: ${config.primaryColor}`)    console.log(`   Secondary: ${config.secondaryColor}`)        const confirm = await prompt('\nContinue? (y/N): ')    if (confirm.toLowerCase() !== 'y') {      console.log('❌ Cancelled')      rl.close()      return    }        createTenant(config)        console.log(`\n✅ Successfully created ${config.tenantName} tenant!`)    console.log(`🌐 Run: pnpm dev:${config.tenantName}`)    console.log(`📱 Open: http://localhost:${config.port}`)      } catch (error) {    console.error('❌ Error creating tenant:', error.message)    process.exit(1)  } finally {    rl.close()  }}async function gatherConfig() {  const availablePorts = ['3002', '3006', '3008', '3010', '3011', '3012']    const tenantName = await prompt('Tenant name: ')  const port = await prompt(`Port (${availablePorts.slice(0, 3).join(', ')}): `) || availablePorts[0]  const primaryColor = await prompt('Primary color (violet, blue, green, red, yellow, purple, pink, indigo): ') || 'blue'  const secondaryColor = await prompt('Secondary color (slate, gray, zinc, neutral, stone): ') || 'slate'    return {    parentSystem,    tenantName,    port,    primaryColor,    secondaryColor,    parentPath: `projects/${parentSystem}/${parentSystem}-app`,    tenantPath: `projects/${parentSystem}/${tenantName}`,    modules: getModulesForSystem(parentSystem)  }}function getModulesForSystem(system) {  const moduleMap = {    'misebox': ['fireux-core', 'fireux-jobs', 'fireux-misebox'],    'cleanbox': ['fireux-core', 'fireux-jobs'],    'fireux': ['fireux-core', 'fireux-jobs']  }  return moduleMap[system] || ['fireux-core']}function createTenant(config) {  console.log('\n🏗️  Creating tenant...')    // Create directories  createDirectories(config)    // Copy assets  copyAssets(config)    // Create config files  createConfigFiles(config)    // Update root package.json  updateRootPackage(config)    // Install dependencies  console.log('📥 Installing dependencies...')  execSync('pnpm install', { stdio: 'inherit' })}function createDirectories(config) {  const dirs = [    config.tenantPath,    `${config.tenantPath}/app`,    `${config.tenantPath}/app/pages`,    `${config.tenantPath}/config`,    `${config.tenantPath}/public`  ]    dirs.forEach(dir => {    if (!fs.existsSync(dir)) {      fs.mkdirSync(dir, { recursive: true })    }  })}function copyAssets(config) {  // Copy public directory  execSync(`cp -r "${config.parentPath}/public/"* "${config.tenantPath}/public/"`, { stdio: 'inherit' })    // Copy service account  fs.copyFileSync(    `${config.parentPath}/config/service-account.json`,    `${config.tenantPath}/config/service-account.json`  )}function createConfigFiles(config) {  // package.json  const packageJson = {    "name": config.tenantName,    "private": true,    "type": "module",    "scripts": {      "build": "nuxt build",      "dev": `nuxt dev --port ${config.port}`,      "generate": "nuxt generate",      "preview": "nuxt preview",      "postinstall": "nuxt prepare",      "clean": "rimraf dist"    },    "dependencies": {      "@nuxt/content": "^3.6.1",      "@nuxt/ui": "3.1.3",      "@vite-pwa/nuxt": "^1.0.4",      "@vueup/vue-quill": "^1.2.0",      "dompurify": "^3.2.6",      "firebase": "^11.9.1",      "firebase-admin": "^13.4.0",      "nuxt": "^3.17.5",      "nuxt-vuefire": "^1.0.5",      "stripe": "^18.3.0",      "vue": "^3.5.17",      "vue-router": "^4.5.1"    }  }    config.modules.forEach(module => {    packageJson.dependencies[module] = "workspace:*"  })    fs.writeFileSync(`${config.tenantPath}/package.json`, JSON.stringify(packageJson, null, 2))    // app.config.ts  const appConfig = `export default defineAppConfig({  ui: {    colors: {      primary: '${config.primaryColor}',      neutral: '${config.secondaryColor}',    },  },})`  fs.writeFileSync(`${config.tenantPath}/app/app.config.ts`, appConfig)    // app.vue  const appVue = `<template>  <UApp>    <FireAppDebug />    <NuxtLayout>      <NuxtPage />    </NuxtLayout>    <UModal      :open="!isInitialized"      prevent-close      title="🚫 Blocked"      description="This app needs to be initialized."    >      <template #body>        <FireOrganismsAppOnboarding />      </template>    </UModal>  </UApp></template><script setup>const { isInitialized } = await useApp()useHead({  link: [{ rel: 'manifest', href: '/manifest.webmanifest' }],})</script><style scoped>/* No debug styles needed */</style>`  fs.writeFileSync(`${config.tenantPath}/app/app.vue`, appVue)    // index.vue  const indexVue = `<template>  <div class="min-h-screen bg-gradient-to-br from-${config.primaryColor}-50 to-${config.secondaryColor}-100">    <section class="relative overflow-hidden">      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">        <div class="text-center">          <h1 class="text-5xl md:text-7xl font-bold text-slate-900 mb-6">            <span class="text-${config.primaryColor}-600">${capitalizeFirst(config.tenantName)}</span>            <br />            <span class="text-3xl md:text-5xl font-medium text-slate-600">              Premium Marketplace            </span>          </h1>                    <p class="text-xl text-slate-600 mb-8 max-w-3xl mx-auto">            A premium tenant of the ${capitalizeFirst(config.parentSystem)} ecosystem.          </p>                    <div class="flex flex-col sm:flex-row gap-4 justify-center">            <NuxtLink              to="/dashboard"              class="bg-${config.primaryColor}-600 hover:bg-${config.primaryColor}-700 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-colors"            >              Get Started            </NuxtLink>          </div>        </div>      </div>    </section>  </div></template><script setup>useHead({  title: '${capitalizeFirst(config.tenantName)} - Premium Marketplace',  meta: [    { name: 'description', content: 'A premium tenant of the ${capitalizeFirst(config.parentSystem)} ecosystem.' }  ]})definePageMeta({  layout: 'default'})</script>`  fs.writeFileSync(`${config.tenantPath}/app/pages/index.vue`, indexVue)    // Create simplified nuxt.config.ts and .env  createNuxtConfig(config)  createEnvFile(config)}function createNuxtConfig(config) {  const modules = config.modules.map(m => `'${m}'`).join(',\n    ')  const nuxtConfig = `import { defineNuxtConfig } from 'nuxt/config'export default defineNuxtConfig({  devtools: { enabled: true },  compatibilityDate: '2025-06-07',  srcDir: 'app/',  dir: {    public: '../public',  },  modules: [    ${modules},    '@nuxt/content'  ],  runtimeConfig: {    public: {      appName: process.env.APP_NAME,      appId: process.env.APP_ID,    },  },})`  fs.writeFileSync(`${config.tenantPath}/nuxt.config.ts`, nuxtConfig)}function createEnvFile(config) {  const colorHex = getColorHex(config.primaryColor).slice(1)  const envContent = `# ${capitalizeFirst(config.tenantName)} App Environment# Firebase Admin CredentialsGOOGLE_APPLICATION_CREDENTIALS=/Users/danielwatson/Dev/fireux/projects/${config.parentSystem}/${config.tenantName}/config/service-account.json# Firebase ConfigurationFIREBASE_API_KEY=AIzaSyBkWm7VONGZRx74pg2vFbnFyDKjruEwg6MFIREBASE_AUTH_DOMAIN=misebox-78f9c.firebaseapp.comFIREBASE_PROJECT_ID=misebox-78f9cFIREBASE_STORAGE_BUCKET=misebox-78f9c.appspot.comFIREBASE_MESSAGING_SENDER_ID=102749723716FIREBASE_APP_ID=1:102749723716:web:8c9d57e9a768f9cd017011FIREBASE_MEASUREMENT_ID=G-4R6XV8JJEP# App SettingsPROJECT_NAME=${capitalizeFirst(config.parentSystem)}APP_NAME=${capitalizeFirst(config.tenantName)}APP_ID=${config.tenantName}APP_SHORT_NAME=${config.tenantName.slice(0, 4)}APP_PRIMARY_COLOR=${colorHex}APP_NEUTRAL_COLOR=64748BAUTHOR_NAME=Daniel Watson (fireux)DOMAIN=http://${config.tenantName}.web.app# Node EnvironmentNODE_ENV=developmentDEV_DOMAIN=${config.port}# Stripe KeysSTRIPE_PUBLISHABLE_KEY=pk_live_51QvnhUPJwpGnKKEeeYQFJyPczawjaIVOaBQ1cYC6bCkiUDJ0IjUqHOrVxbBPXSzB1WZ4jkrVJbIg5lYuxNdRoFba008j5j7iM3STRIPE_SECRET_KEY=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_WEBHOOK_SECRET=whsec_TUPEZn1qazwvvyJGJP40bIgBwkVV8B4cPIN=1234`  fs.writeFileSync(`${config.tenantPath}/.env`, envContent)}function updateRootPackage(config) {  const rootPackagePath = 'package.json'  const packageJson = JSON.parse(fs.readFileSync(rootPackagePath, 'utf8'))    packageJson.scripts[`dev:${config.tenantName}`] = `pnpm --filter ./projects/${config.parentSystem}/${config.tenantName} dev`    fs.writeFileSync(rootPackagePath, JSON.stringify(packageJson, null, 2))}function capitalizeFirst(str) {  return str.charAt(0).toUpperCase() + str.slice(1)}function getColorHex(color) {  const colorMap = {    'violet': '#8B5CF6',    'blue': '#3B82F6',    'green': '#22C55E',    'red': '#EF4444',    'yellow': '#EAB308',    'purple': '#A855F7',    'pink': '#EC4899',    'indigo': '#6366F1'  }  return colorMap[color] || '#3B82F6'}// Start the interactive processmain()
