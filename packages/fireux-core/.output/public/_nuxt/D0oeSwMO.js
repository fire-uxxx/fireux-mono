import{A as c,B as u,C as d,D as U,E as l,m as g,G as w,H as h,I as m,J as E,K as f,L as p,M as C}from"./BVTICooV.js";import{useCoreUserEnsure as I}from"./CFEbfYP3.js";function y(){const o=c();async function t(e,n){if(!e||!n)return Promise.reject("❌ UID and updates are required to update Core User.");try{const i=u(o,"users",e);await d(i,n),console.log(`✅ [updateCoreUser] Core user with UID: ${e} updated.`)}catch(i){throw console.error(`❌ [updateCoreUser] Error updating Core user with UID: ${e}`,i),i}}return{updateCoreUser:t}}function S(){const o=c();async function t(e){if(!e)throw new Error("[deleteCoreUser] User ID is required.");try{await U(u(o,"users",e)),console.log(`✅ [deleteCoreUser] Core user with ID ${e} deleted successfully.`)}catch(n){throw console.error(`[deleteCoreUser] Error deleting core user with ID ${e}:`,n),n}}return{deleteCoreUser:t}}async function D(){const o=c(),t=l(),e=g(()=>t.value?u(o,"core-users",t.value.uid):null),{data:n}=w(e);return{coreUser:n,...await I(),...await y(),...await S()}}function T(){const o=m(),t=l(),e=async s=>{const{ensureCoreUser:a}=await D();await a()},n=g(()=>t.value&&!t.value.isAnonymous?"AUTHENTICATED":"NOT_AUTHENTICATED");return{currentUser:t,authState:n,signInWithGoogle:async()=>{try{const s=new p,a=await C(o,s);return await e(a.user),console.log("✅ Google Sign-In Success - User:",a.user),a.user}catch(s){s instanceof Error?console.error("❌ Google Sign-In Failed:",s.message):console.error("❌ Google Sign-In Failed:",s)}},signInWithEmailPassword:async(s,a)=>{try{const r=await f(o,s,a);return await e(r.user),console.log("✅ Email Sign-In Success - User:",r.user),r.user}catch(r){return r instanceof Error?console.error("❌ Email Sign-In Failed:",r.message):console.error("❌ Email Sign-In Failed:",r),null}},signUpWithEmailPassword:async(s,a)=>{try{const r=await E(o,s,a);return await e(r.user),console.log("✅ Email Sign-Up Success - User:",r.user),r.user}catch(r){return r instanceof Error?console.error("❌ Email Sign-Up Failed:",r.message):console.error("❌ Email Sign-Up Failed:",r),null}},signOutUser:async()=>{try{await h(o),console.log("✅ Signed out successfully")}catch(s){s instanceof Error?console.error("❌ Sign-Out Failed:",s.message):console.error("❌ Sign-Out Failed:",s)}}}}export{T as u};
